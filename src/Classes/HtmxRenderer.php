<?php

namespace App\Classes;

use DOMDocument;
use DOMElement;
use DOMNode;
use DOMXPath;
use Psr\Http\Message\ResponseInterface;
use Slim\Views\PhpRenderer;

class HtmxRenderer extends PhpRenderer
{

   private bool $partialLoaded = false;

   public function render(ResponseInterface $response, string $template, array $data = []): ResponseInterface
   {
      $response = parent::render($response, $template, $data);
      if ($this->isHxRequest() && $this->partialLoaded != true) {
         $response = $response->withStatus(204);
      }
      return $response;
   }

   protected function protectedIncludeScope(string $template, array $data): void
   {
      extract($data);
      $markup = file_get_contents($template);
      $markup = $this->asHtmx($markup);
      $markup = $this->stripHx($markup);
      $markup = $this->withCustomExpressions($markup);
      eval ("?>" . $markup);
   }

   public function withCustomExpressions(string $extendedHtml)
   {
      $pattern = '/{{\s?(\$\S*)\s?}}/';

      // Handle {{ $variable }} syntax. Support for filters
      $extendedHtml = preg_replace_callback($pattern, function ($matches) {
         $expression = $matches[1];
         return "<?= htmlspecialchars($expression, encoding: 'UTF-8') ?>";
      }, $extendedHtml);

      // Same as above but unescaped
      $pattern = '/{{!unescaped\s(\$\S*)\s?}}/';
      $extendedHtml = preg_replace_callback($pattern, function ($matches) {
         $expression = $matches[1];
         return "<?= $expression ?>";
      }, $extendedHtml);

      // isset start
      $pattern = '/{{isset\s(\$.*)\s?}}/';
      $extendedHtml = preg_replace_callback($pattern, function ($matches) {
         $expression = $matches[1];
         return "<?php if(isset($expression)): ?>";
      }, $extendedHtml);

      // isset end
      $pattern = '/{{\/isset\s?}}/';
      $extendedHtml = preg_replace_callback($pattern, function ($matches) {
         return "<?php endif; ?>";
      }, $extendedHtml);

      return $extendedHtml;
   }

   /**
    * Returns the given html as a htmx content based
    */
    public function asHtmx(string $extendedHtml)
    {
       $extendedHtml = $this->hxPartial($extendedHtml);
       return $extendedHtml;
    }

   private function hxPartial(string $extendedHtml)
   {
      $dom = $this->makeDom($extendedHtml);
      $elements = $dom->getElementsByTagName('hx-partial');
      
      foreach ($elements as $hxElement) {
         if ($this->isHxRequest() && $this->routeMatches($hxElement) && $this->methodMatches($hxElement)) {
            $extendedHtml = $this->innerHtml($dom, $hxElement);
            $this->partialLoaded = true;
            return $extendedHtml;
         } else if ($hxElement->getAttribute('hx-only') === "true") {
            $html = $this->innerHtml($dom, $hxElement);
            $extendedHtml = str_replace($html, "", $extendedHtml);
         }
      }

      return $extendedHtml;
   }
         
   private function routeMatches(DOMElement $hxElement){
      return $hxElement->getAttribute('route') === $this->requestUri();
   }
   
   private function methodMatches(DOMElement $hxElement){
      return str_contains(strtoupper($hxElement->getAttribute('method')), $this->requestMethod());
   }
   
   private function innerHtml(DOMDocument $dom, DOMElement $element): string
   {
      $innerHtml = '';
      foreach ($element->childNodes as $childNode) {
         $innerHtml .= $dom->saveHTML($childNode);
      }
      return $innerHtml;
   }
   
   private function requestUri() {
      return $_SERVER['REQUEST_URI'];     
   }
   
   private function requestMethod() {
      return $_SERVER['REQUEST_METHOD'];
   }
   
   private function isHxRequest(){
      return isset($_SERVER['HTTP_HX_REQUEST']);
   }
   
   private function isHxBoosted(){
      return isset($_SERVER['HTTP_HX_BOOSTED']);
   }
   
   /**
    * Remove hx-tags from the output
    */
    private function stripHx(string $extendedHtml)
    {
  
       $hxTags = ['hx-partial', 'hx-if', 'hx-match', 'hx-else'];
       foreach ($hxTags as $hxTag) {
         $pattern = "/<\/?$hxTag?.+\/?>/";
         $extendedHtml = preg_replace($pattern, "", $extendedHtml);
       }
        
       if ($this->partialLoaded) {
          // Remove body and html tags generated by DOMDocument
          $extendedHtml = str_replace(["<body>", "</body>", "<html>", "</html>"], "", $extendedHtml);
          // Remove !Doctype generated by DOMDocument
          $extendedHtml = preg_replace('/\<!DOCTYPE.+\s?\n/', "", $extendedHtml);
       }
       return $extendedHtml;
    }
    
    private function makeDom(string $extendedHtml){
      // Initialize DOMDocument
      $dom = new DOMDocument();
      // Suppress warnings due to malformed HTML
      libxml_use_internal_errors(true);
      // Load the HTML
      $dom->loadHTML($extendedHtml);
      // Clear errors
      libxml_clear_errors();
      // Get all elements by tag name
      
      return $dom;
   }
}